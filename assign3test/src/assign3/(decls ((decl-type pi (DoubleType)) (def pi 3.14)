(decls ((decl-type pi (DoubleType)) (def pi 3.14) (decl-data Float () ((constructor Box (DoubleType)))) (decl-data MyList (a) ((constructor MT (UnitType)) (constructor Cons (TupleType (a (NamedType MyList a)))))) (decl-data Either (a b) ((constructor Left a) (constructor Right b))) (decl-type arith (IntType)) (def arith (call *+i* (Tuple (2 (call **i* (Tuple (3 4))))))) (decl-type lst1 (NamedType *List* ((IntType)))) (def lst1 (call *Cons* (Tuple (1 (call *Cons* (Tuple (2 (call *Cons* (Tuple (3 (EmptyList))))))))))) (decl-type triple (TupleType ((UnitType) (NamedType *List* (a)) (NamedType *List* ((IntType)))))) (def triple (Tuple ((Unit) (EmptyList) (call *Cons* (Tuple ((call *+i* (Tuple (99 1))) (EmptyList))))))) (decl-type fact (ArrowType (IntType) (IntType))) (defun fact (0) 1) (defun fact (n) (call **i* (Tuple (n (call fact (call *-i* (Tuple (n 1)))))))) (decl-type mkAdd (ArrowType (IntType) (ArrowType (IntType) (IntType)))) (defun mkAdd (n m) (call *+i* (Tuple (n m)))) (decl-type seven (IntType)) (def seven (call (call mkAdd 2) 5)) (decl-type facta (ArrowType (TupleType ((IntType) (IntType))) (IntType))) (defun facta ((TuplePat (n a))) (if (call *==i* (Tuple (n 0))) a (call facta (Tuple ((call *-i* (Tuple (n 1))) (call **i* (Tuple (n a)))))))) (decl-type map (ArrowType (TupleType ((ArrowType a b) (NamedType *List* (a)))) (NamedType *List* (b)))) (defun map ((TuplePat (f (EmptyList)))) (EmptyList)) (defun map ((TuplePat (f (call-pat *Cons* (TuplePat (x xs)))))) (call *Cons* (Tuple ((call f x) (call map (Tuple (f xs))))))) (decl-type reva (ArrowType (TupleType ((NamedType *List* (t)) (NamedType *List* (t)))) (NamedType *List* (t)))) (defun reva ((TuplePat ((EmptyList) a))) a) (defun reva ((TuplePat ((call-pat *Cons* (TuplePat (x xs))) a))) (call reva (Tuple (xs (call *Cons* (Tuple (x a))))))) (decl-type rev2 (ArrowType (TupleType ((NamedType *List* (t)) (NamedType *List* (t)))) (NamedType *List* (t)))) (def rev2 (lambda (((TuplePat ((EmptyList) a)) a) ((TuplePat ((call-pat *Cons* (TuplePat (x xs))) a)) (call rev2 (Tuple (xs (call *Cons* (Tuple (x a)))))))))) (decl-type foo (ArrowType (DoubleType) (DoubleType))) (defun foo (-2.718) 1.0) (decl-type bar (ArrowType (TupleType ((ArrowType a b) (NamedType MyList a))) (NamedType MyList b))) (decl-type baz (NamedType Either (TupleType (a b)))) (decl-type test (BoolType)) (def test (or (or (or true false) true) false)) (decl-type test2 (IntType)) (def test2 (call *+i* (Tuple ((call *+i* (Tuple ((call *+i* (Tuple (1 2))) 3))) 4)))) (decl-type test3 (BoolType)) (def test3 (or (or true (and false true)) false)) (decl-type append (ArrowType (TupleType ((NamedType *List* (a)) (NamedType *List* (a)))) (NamedType *List* (a)))) (defun append ((TuplePat (L1 L2))) (case L1 (((EmptyList) L2) ((call-pat *Cons* (TuplePat (x xs))) (call *Cons* (Tuple (x (call append (Tuple (xs L2)))))))))) (decl-type curAppend (ArrowType (NamedType *List* (a)) (ArrowType (NamedType *List* (a)) (NamedType *List* (a))))) (defun curAppend ((EmptyList) L) L) (defun curAppend ((call-pat *Cons* (TuplePat (x xs))) L) (call *Cons* (Tuple (x (call (call curAppend xs) L))))) (decl-type myAppend (ArrowType (TupleType ((NamedType MyList a) (NamedType MyList a))) (NamedType MyList a))) (defun myAppend ((TuplePat (L1 L2))) (case L1 (((call-pat MT ()) L2) ((call-pat Cons (x xs)) (call Cons (Tuple (x (call myAppend (Tuple (xs L2)))))))))) (decl-type insert (ArrowType (TupleType ((IntType) (NamedType *List* ((IntType))))) (NamedType *List* ((IntType))))) (defun insert ((TuplePat (x (EmptyList)))) (call *Cons* (Tuple (x (EmptyList))))) (defun insert ((TuplePat (x (call-pat *Cons* (TuplePat (y ys)))))) (if (call *<=i* (Tuple (x y))) (call *Cons* (Tuple (x (call *Cons* (Tuple (y ys)))))) (call *Cons* (Tuple (y (call insert (Tuple (x ys)))))))) (decl-type iSort (ArrowType (NamedType *List* ((IntType))) (NamedType *List* ((IntType))))) (defun iSort ((EmptyList)) (EmptyList)) (defun iSort ((call-pat *Cons* (TuplePat (x xs)))) (call insert (Tuple (x (call iSort xs))))) (decl-type abs (ArrowType (DoubleType) (DoubleType))) (defun abs (x) (if (call *<d* (Tuple (x 0.0))) (call *negd* x) x)) (decl-type average (ArrowType (TupleType ((DoubleType) (DoubleType))) (DoubleType))) (defun average ((TuplePat (x y))) (call *divd* (Tuple ((call *+d* (Tuple (x y))) 2.0)))) (decl-type improveSqrtGuess (ArrowType (TupleType ((DoubleType) (DoubleType))) (DoubleType))) (defun improveSqrtGuess ((TuplePat (a g))) (call average (Tuple (g (call *divd* (Tuple (a g))))))) (decl-type epsilon (DoubleType)) (def epsilon 1.0E-10) (decl-type isCloseEnough (ArrowType (TupleType ((DoubleType) (DoubleType))) (BoolType))) (defun isCloseEnough ((TuplePat (x y))) (call *<d* (Tuple ((call abs (call *-d* (Tuple (1.0 (call *divd* (Tuple (x y))))))) epsilon)))) (decl-type sqrtIter (ArrowType (TupleType ((DoubleType) (DoubleType))) (DoubleType))) (defun sqrtIter ((TuplePat (a g))) (if (call isCloseEnough (Tuple ((call **d* (Tuple (g g))) a))) g (call sqrtIter (Tuple (a (call improveSqrtGuess (Tuple (a g)))))))) (decl-type sqrt (ArrowType (DoubleType) (DoubleType))) (defun sqrt (x) (call sqrtIter (Tuple (x 1.0)))) (decl-type quad (ArrowType (TupleType ((DoubleType) (DoubleType) (DoubleType))) (TupleType ((DoubleType) (DoubleType))))) (defun quad ((TuplePat (a b c))) (let ((e (call *-d* (Tuple ((call **d* (Tuple (b b))) (call **d* (Tuple ((call **d* (Tuple (4.0 a))) c))))))) (d (call sqrt e))) (Tuple ((call *divd* (Tuple ((call *+d* (Tuple ((call *negd* b) d))) (call **d* (Tuple (2.0 a)))))) (call *divd* (Tuple ((call *-d* (Tuple ((call *negd* b) d))) (call **d* (Tuple (2.0 a)))))))))) (decl-type maxRoot (ArrowType (TupleType ((DoubleType) (DoubleType) (DoubleType))) (DoubleType))) (defun maxRoot ((TuplePat (a b c))) (let (((TuplePat (r1 r2)) (call quad (Tuple (a b c))))) r1)) (decl-type head (ArrowType (NamedType *List* (a)) a)) (defun head (L) (case L (((EmptyList) (error Can't take head.)) ((call-pat *Cons* (TuplePat (x xs))) x)))) (decl-type head2 (ArrowType (NamedType *List* (a)) (NamedType Either (TupleType ((StringType) a))))) (defun head2 ((EmptyList)) (call Left Oops)) (defun head2 ((call-pat *Cons* (TuplePat (x xs)))) (call Right x))))